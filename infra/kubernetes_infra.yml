Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        

    PublicSubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String

Resources:

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName}-CapstoneVPC
    
    PublicSubnet: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    
    #vpc need internet
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
    #Rule
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

        
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install git apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
            sudo curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 
            sudo chmod +x minikube
            sudo mkdir -p /usr/local/bin/
            sudo install minikube /usr/local/bin/
            sudo apt-get remove docker docker-engine docker.io containerd runc
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y
            sudo apt-get update -y
            sudo apt-get install docker-ce docker-ce-cli containerd.io -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/` curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            sudo chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            sudo usermod -aG docker ubuntu && newgrp docker
            minikube start
            git clone https://github.com/ayamorsi/UdacityCapstone.git
            kubectl apply -f UdacityCapstone/k8/redis-deployment.yml
            kubectl apply -f UdacityCapstone/k8/redis-service.yml
            kubectl apply -f UdacityCapstone/k8/python-app-deployment.yml
            kubectl apply -f UdacityCapstone/k8/python-app-service.yml
        ImageId: ami-005bdb005fb00e791
        KeyName: test
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t2.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
          - !Ref PublicSubnet
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: 1
        MaxSize: 1
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
    
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 300
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 10
        VpcId: !Ref VPC
    
Outputs:
  VPC:
    Description:  VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${EnvironmentName}-VPC" 

  PublicSubnet1:
    Description: Public Subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${EnvironmentName}-PublicSubnet-1"
        
